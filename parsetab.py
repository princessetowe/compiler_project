
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "BREAK CLASS COMMENT DEF ELSE EXCEPT FOR IDENTIFIER IF KEYWORD NUMBER OPERATOR PRINT RETURN STRING TRY WHILEprogram : statement_liststatement_list : statement\n                      | statement_list statementstatement : assignment\n                 | print_statement\n                 | if_statementassignment : IDENTIFIER OPERATOR expressionprint_statement : PRINT '(' expression ')' if_statement : IF expression ':' statement_list ELSE ':' statement_list\n                    | IF expression ':' statement_listexpression : term\n                  | expression OPERATOR termterm : NUMBER\n            | STRING\n            | IDENTIFIER"
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,6,9,10,11,12,14,15,16,17,18,20,21,22,23,24,26,27,],[7,7,-2,-4,-5,-6,17,-3,17,17,-11,-13,-14,-15,-7,7,17,-8,7,-12,7,7,]),'PRINT':([0,2,3,4,5,6,10,14,15,16,17,18,20,22,23,24,26,27,],[8,8,-2,-4,-5,-6,-3,-11,-13,-14,-15,-7,8,-8,8,-12,8,8,]),'IF':([0,2,3,4,5,6,10,14,15,16,17,18,20,22,23,24,26,27,],[9,9,-2,-4,-5,-6,-3,-11,-13,-14,-15,-7,9,-8,9,-12,9,9,]),'$end':([1,2,3,4,5,6,10,14,15,16,17,18,22,23,24,27,],[0,-1,-2,-4,-5,-6,-3,-11,-13,-14,-15,-7,-8,-10,-12,-9,]),'ELSE':([3,4,5,6,10,14,15,16,17,18,22,23,24,27,],[-2,-4,-5,-6,-3,-11,-13,-14,-15,-7,-8,25,-12,-9,]),'OPERATOR':([7,13,14,15,16,17,18,19,24,],[11,21,-11,-13,-14,-15,21,21,-12,]),'(':([8,],[12,]),'NUMBER':([9,11,12,21,],[15,15,15,15,]),'STRING':([9,11,12,21,],[16,16,16,16,]),':':([13,14,15,16,17,24,25,],[20,-11,-13,-14,-15,-12,26,]),')':([14,15,16,17,19,24,],[-11,-13,-14,-15,22,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,20,26,],[2,23,27,]),'statement':([0,2,20,23,26,27,],[3,10,3,10,3,10,]),'assignment':([0,2,20,23,26,27,],[4,4,4,4,4,4,]),'print_statement':([0,2,20,23,26,27,],[5,5,5,5,5,5,]),'if_statement':([0,2,20,23,26,27,],[6,6,6,6,6,6,]),'expression':([9,11,12,],[13,18,19,]),'term':([9,11,12,21,],[14,14,14,24,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',6),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',10),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',11),
  ('statement -> assignment','statement',1,'p_statement','parser.py',15),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',16),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',17),
  ('assignment -> IDENTIFIER OPERATOR expression','assignment',3,'p_assignment','parser.py',21),
  ('print_statement -> PRINT ( expression )','print_statement',4,'p_print_statement','parser.py',26),
  ('if_statement -> IF expression : statement_list ELSE : statement_list','if_statement',7,'p_if_statement','parser.py',30),
  ('if_statement -> IF expression : statement_list','if_statement',4,'p_if_statement','parser.py',31),
  ('expression -> term','expression',1,'p_expression','parser.py',35),
  ('expression -> expression OPERATOR term','expression',3,'p_expression','parser.py',36),
  ('term -> NUMBER','term',1,'p_term','parser.py',40),
  ('term -> STRING','term',1,'p_term','parser.py',41),
  ('term -> IDENTIFIER','term',1,'p_term','parser.py',42),
]
