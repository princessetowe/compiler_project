
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOPERATORCOMMENT IDENTIFIER NUMBER OPERATOR STRINGstatement : expressionexpression : expression OPERATOR expressionexpression : NUMBERexpression : STRINGexpression : IDENTIFIER'
    
_lr_action_items = {'NUMBER':([0,6,],[3,3,]),'STRING':([0,6,],[4,4,]),'IDENTIFIER':([0,6,],[5,5,]),'$end':([1,2,3,4,5,7,],[0,-1,-3,-4,-5,-2,]),'OPERATOR':([2,3,4,5,7,],[6,-3,-4,-5,-2,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,6,],[2,7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',49),
  ('expression -> expression OPERATOR expression','expression',3,'p_expression_binop','parser.py',53),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',57),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',61),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',65),
]
