Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     statement -> assignment
Rule 3     statement -> control_structure
Rule 4     statement -> function_def
Rule 5     statement -> empty
Rule 6     expression -> term
Rule 7     expression -> expression PLUS term
Rule 8     expression -> expression MINUS term
Rule 9     term -> factor
Rule 10    term -> term MULTIPLY factor
Rule 11    term -> term DIVIDE factor
Rule 12    factor -> NUMBER
Rule 13    factor -> STRING
Rule 14    factor -> IDENTIFIER
Rule 15    factor -> LPAREN expression RPAREN
Rule 16    assignment -> IDENTIFIER EQUAL expression
Rule 17    control_structure -> if_statement
Rule 18    control_structure -> while_loop
Rule 19    control_structure -> for_loop
Rule 20    if_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 21    if_statement -> IF LPAREN expression RPAREN statement
Rule 22    while_loop -> WHILE LPAREN expression RPAREN statement
Rule 23    for_loop -> FOR LPAREN assignment expression RPAREN statement
Rule 24    function_def -> DEF IDENTIFIER LPAREN RPAREN statement
Rule 25    empty -> <empty>

Terminals, with rules where they appear

DEF                  : 24
DIVIDE               : 11
ELSE                 : 20
EQUAL                : 16
FOR                  : 23
IDENTIFIER           : 14 16 24
IF                   : 20 21
LPAREN               : 15 20 21 22 23 24
MINUS                : 8
MULTIPLY             : 10
NUMBER               : 12
PLUS                 : 7
RPAREN               : 15 20 21 22 23 24
STRING               : 13
WHILE                : 22
error                : 

Nonterminals, with rules where they appear

assignment           : 2 23
control_structure    : 3
empty                : 5
expression           : 1 7 8 15 16 20 21 22 23
factor               : 9 10 11
for_loop             : 19
function_def         : 4
if_statement         : 17
statement            : 20 20 21 22 23 24 0
term                 : 6 7 8 10 11
while_loop           : 18

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) statement -> . assignment
    (3) statement -> . control_structure
    (4) statement -> . function_def
    (5) statement -> . empty
    (6) expression -> . term
    (7) expression -> . expression PLUS term
    (8) expression -> . expression MINUS term
    (16) assignment -> . IDENTIFIER EQUAL expression
    (17) control_structure -> . if_statement
    (18) control_structure -> . while_loop
    (19) control_structure -> . for_loop
    (24) function_def -> . DEF IDENTIFIER LPAREN RPAREN statement
    (25) empty -> .
    (9) term -> . factor
    (10) term -> . term MULTIPLY factor
    (11) term -> . term DIVIDE factor
    (20) if_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (21) if_statement -> . IF LPAREN expression RPAREN statement
    (22) while_loop -> . WHILE LPAREN expression RPAREN statement
    (23) for_loop -> . FOR LPAREN assignment expression RPAREN statement
    (12) factor -> . NUMBER
    (13) factor -> . STRING
    (14) factor -> . IDENTIFIER
    (15) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 8
    DEF             shift and go to state 12
    $end            reduce using rule 25 (empty -> .)
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    LPAREN          shift and go to state 13

    statement                      shift and go to state 1
    expression                     shift and go to state 2
    assignment                     shift and go to state 3
    control_structure              shift and go to state 4
    function_def                   shift and go to state 5
    empty                          shift and go to state 6
    term                           shift and go to state 7
    if_statement                   shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    factor                         shift and go to state 14

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (7) expression -> expression . PLUS term
    (8) expression -> expression . MINUS term

    $end            reduce using rule 1 (statement -> expression .)
    ELSE            reduce using rule 1 (statement -> expression .)
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21


state 3

    (2) statement -> assignment .

    $end            reduce using rule 2 (statement -> assignment .)
    ELSE            reduce using rule 2 (statement -> assignment .)


state 4

    (3) statement -> control_structure .

    $end            reduce using rule 3 (statement -> control_structure .)
    ELSE            reduce using rule 3 (statement -> control_structure .)


state 5

    (4) statement -> function_def .

    $end            reduce using rule 4 (statement -> function_def .)
    ELSE            reduce using rule 4 (statement -> function_def .)


state 6

    (5) statement -> empty .

    $end            reduce using rule 5 (statement -> empty .)
    ELSE            reduce using rule 5 (statement -> empty .)


state 7

    (6) expression -> term .
    (10) term -> term . MULTIPLY factor
    (11) term -> term . DIVIDE factor

    PLUS            reduce using rule 6 (expression -> term .)
    MINUS           reduce using rule 6 (expression -> term .)
    $end            reduce using rule 6 (expression -> term .)
    RPAREN          reduce using rule 6 (expression -> term .)
    NUMBER          reduce using rule 6 (expression -> term .)
    STRING          reduce using rule 6 (expression -> term .)
    IDENTIFIER      reduce using rule 6 (expression -> term .)
    LPAREN          reduce using rule 6 (expression -> term .)
    ELSE            reduce using rule 6 (expression -> term .)
    MULTIPLY        shift and go to state 22
    DIVIDE          shift and go to state 23


state 8

    (16) assignment -> IDENTIFIER . EQUAL expression
    (14) factor -> IDENTIFIER .

    EQUAL           shift and go to state 24
    MULTIPLY        reduce using rule 14 (factor -> IDENTIFIER .)
    DIVIDE          reduce using rule 14 (factor -> IDENTIFIER .)
    PLUS            reduce using rule 14 (factor -> IDENTIFIER .)
    MINUS           reduce using rule 14 (factor -> IDENTIFIER .)
    $end            reduce using rule 14 (factor -> IDENTIFIER .)
    ELSE            reduce using rule 14 (factor -> IDENTIFIER .)


state 9

    (17) control_structure -> if_statement .

    $end            reduce using rule 17 (control_structure -> if_statement .)
    ELSE            reduce using rule 17 (control_structure -> if_statement .)


state 10

    (18) control_structure -> while_loop .

    $end            reduce using rule 18 (control_structure -> while_loop .)
    ELSE            reduce using rule 18 (control_structure -> while_loop .)


state 11

    (19) control_structure -> for_loop .

    $end            reduce using rule 19 (control_structure -> for_loop .)
    ELSE            reduce using rule 19 (control_structure -> for_loop .)


state 12

    (24) function_def -> DEF . IDENTIFIER LPAREN RPAREN statement

    IDENTIFIER      shift and go to state 25


state 13

    (15) factor -> LPAREN . expression RPAREN
    (6) expression -> . term
    (7) expression -> . expression PLUS term
    (8) expression -> . expression MINUS term
    (9) term -> . factor
    (10) term -> . term MULTIPLY factor
    (11) term -> . term DIVIDE factor
    (12) factor -> . NUMBER
    (13) factor -> . STRING
    (14) factor -> . IDENTIFIER
    (15) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    IDENTIFIER      shift and go to state 27
    LPAREN          shift and go to state 13

    expression                     shift and go to state 26
    term                           shift and go to state 7
    factor                         shift and go to state 14

state 14

    (9) term -> factor .

    MULTIPLY        reduce using rule 9 (term -> factor .)
    DIVIDE          reduce using rule 9 (term -> factor .)
    PLUS            reduce using rule 9 (term -> factor .)
    MINUS           reduce using rule 9 (term -> factor .)
    $end            reduce using rule 9 (term -> factor .)
    RPAREN          reduce using rule 9 (term -> factor .)
    NUMBER          reduce using rule 9 (term -> factor .)
    STRING          reduce using rule 9 (term -> factor .)
    IDENTIFIER      reduce using rule 9 (term -> factor .)
    LPAREN          reduce using rule 9 (term -> factor .)
    ELSE            reduce using rule 9 (term -> factor .)


state 15

    (20) if_statement -> IF . LPAREN expression RPAREN statement ELSE statement
    (21) if_statement -> IF . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 28


state 16

    (22) while_loop -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 29


state 17

    (23) for_loop -> FOR . LPAREN assignment expression RPAREN statement

    LPAREN          shift and go to state 30


state 18

    (12) factor -> NUMBER .

    MULTIPLY        reduce using rule 12 (factor -> NUMBER .)
    DIVIDE          reduce using rule 12 (factor -> NUMBER .)
    PLUS            reduce using rule 12 (factor -> NUMBER .)
    MINUS           reduce using rule 12 (factor -> NUMBER .)
    $end            reduce using rule 12 (factor -> NUMBER .)
    RPAREN          reduce using rule 12 (factor -> NUMBER .)
    NUMBER          reduce using rule 12 (factor -> NUMBER .)
    STRING          reduce using rule 12 (factor -> NUMBER .)
    IDENTIFIER      reduce using rule 12 (factor -> NUMBER .)
    LPAREN          reduce using rule 12 (factor -> NUMBER .)
    ELSE            reduce using rule 12 (factor -> NUMBER .)


state 19

    (13) factor -> STRING .

    MULTIPLY        reduce using rule 13 (factor -> STRING .)
    DIVIDE          reduce using rule 13 (factor -> STRING .)
    PLUS            reduce using rule 13 (factor -> STRING .)
    MINUS           reduce using rule 13 (factor -> STRING .)
    $end            reduce using rule 13 (factor -> STRING .)
    RPAREN          reduce using rule 13 (factor -> STRING .)
    NUMBER          reduce using rule 13 (factor -> STRING .)
    STRING          reduce using rule 13 (factor -> STRING .)
    IDENTIFIER      reduce using rule 13 (factor -> STRING .)
    LPAREN          reduce using rule 13 (factor -> STRING .)
    ELSE            reduce using rule 13 (factor -> STRING .)


state 20

    (7) expression -> expression PLUS . term
    (9) term -> . factor
    (10) term -> . term MULTIPLY factor
    (11) term -> . term DIVIDE factor
    (12) factor -> . NUMBER
    (13) factor -> . STRING
    (14) factor -> . IDENTIFIER
    (15) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    IDENTIFIER      shift and go to state 27
    LPAREN          shift and go to state 13

    term                           shift and go to state 31
    factor                         shift and go to state 14

state 21

    (8) expression -> expression MINUS . term
    (9) term -> . factor
    (10) term -> . term MULTIPLY factor
    (11) term -> . term DIVIDE factor
    (12) factor -> . NUMBER
    (13) factor -> . STRING
    (14) factor -> . IDENTIFIER
    (15) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    IDENTIFIER      shift and go to state 27
    LPAREN          shift and go to state 13

    term                           shift and go to state 32
    factor                         shift and go to state 14

state 22

    (10) term -> term MULTIPLY . factor
    (12) factor -> . NUMBER
    (13) factor -> . STRING
    (14) factor -> . IDENTIFIER
    (15) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    IDENTIFIER      shift and go to state 27
    LPAREN          shift and go to state 13

    factor                         shift and go to state 33

state 23

    (11) term -> term DIVIDE . factor
    (12) factor -> . NUMBER
    (13) factor -> . STRING
    (14) factor -> . IDENTIFIER
    (15) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    IDENTIFIER      shift and go to state 27
    LPAREN          shift and go to state 13

    factor                         shift and go to state 34

state 24

    (16) assignment -> IDENTIFIER EQUAL . expression
    (6) expression -> . term
    (7) expression -> . expression PLUS term
    (8) expression -> . expression MINUS term
    (9) term -> . factor
    (10) term -> . term MULTIPLY factor
    (11) term -> . term DIVIDE factor
    (12) factor -> . NUMBER
    (13) factor -> . STRING
    (14) factor -> . IDENTIFIER
    (15) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    IDENTIFIER      shift and go to state 27
    LPAREN          shift and go to state 13

    expression                     shift and go to state 35
    term                           shift and go to state 7
    factor                         shift and go to state 14

state 25

    (24) function_def -> DEF IDENTIFIER . LPAREN RPAREN statement

    LPAREN          shift and go to state 36


state 26

    (15) factor -> LPAREN expression . RPAREN
    (7) expression -> expression . PLUS term
    (8) expression -> expression . MINUS term

    RPAREN          shift and go to state 37
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21


state 27

    (14) factor -> IDENTIFIER .

    MULTIPLY        reduce using rule 14 (factor -> IDENTIFIER .)
    DIVIDE          reduce using rule 14 (factor -> IDENTIFIER .)
    RPAREN          reduce using rule 14 (factor -> IDENTIFIER .)
    PLUS            reduce using rule 14 (factor -> IDENTIFIER .)
    MINUS           reduce using rule 14 (factor -> IDENTIFIER .)
    $end            reduce using rule 14 (factor -> IDENTIFIER .)
    NUMBER          reduce using rule 14 (factor -> IDENTIFIER .)
    STRING          reduce using rule 14 (factor -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 14 (factor -> IDENTIFIER .)
    LPAREN          reduce using rule 14 (factor -> IDENTIFIER .)
    ELSE            reduce using rule 14 (factor -> IDENTIFIER .)


state 28

    (20) if_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (21) if_statement -> IF LPAREN . expression RPAREN statement
    (6) expression -> . term
    (7) expression -> . expression PLUS term
    (8) expression -> . expression MINUS term
    (9) term -> . factor
    (10) term -> . term MULTIPLY factor
    (11) term -> . term DIVIDE factor
    (12) factor -> . NUMBER
    (13) factor -> . STRING
    (14) factor -> . IDENTIFIER
    (15) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    IDENTIFIER      shift and go to state 27
    LPAREN          shift and go to state 13

    expression                     shift and go to state 38
    term                           shift and go to state 7
    factor                         shift and go to state 14

state 29

    (22) while_loop -> WHILE LPAREN . expression RPAREN statement
    (6) expression -> . term
    (7) expression -> . expression PLUS term
    (8) expression -> . expression MINUS term
    (9) term -> . factor
    (10) term -> . term MULTIPLY factor
    (11) term -> . term DIVIDE factor
    (12) factor -> . NUMBER
    (13) factor -> . STRING
    (14) factor -> . IDENTIFIER
    (15) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    IDENTIFIER      shift and go to state 27
    LPAREN          shift and go to state 13

    expression                     shift and go to state 39
    term                           shift and go to state 7
    factor                         shift and go to state 14

state 30

    (23) for_loop -> FOR LPAREN . assignment expression RPAREN statement
    (16) assignment -> . IDENTIFIER EQUAL expression

    IDENTIFIER      shift and go to state 41

    assignment                     shift and go to state 40

state 31

    (7) expression -> expression PLUS term .
    (10) term -> term . MULTIPLY factor
    (11) term -> term . DIVIDE factor

    PLUS            reduce using rule 7 (expression -> expression PLUS term .)
    MINUS           reduce using rule 7 (expression -> expression PLUS term .)
    $end            reduce using rule 7 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 7 (expression -> expression PLUS term .)
    NUMBER          reduce using rule 7 (expression -> expression PLUS term .)
    STRING          reduce using rule 7 (expression -> expression PLUS term .)
    IDENTIFIER      reduce using rule 7 (expression -> expression PLUS term .)
    LPAREN          reduce using rule 7 (expression -> expression PLUS term .)
    ELSE            reduce using rule 7 (expression -> expression PLUS term .)
    MULTIPLY        shift and go to state 22
    DIVIDE          shift and go to state 23


state 32

    (8) expression -> expression MINUS term .
    (10) term -> term . MULTIPLY factor
    (11) term -> term . DIVIDE factor

    PLUS            reduce using rule 8 (expression -> expression MINUS term .)
    MINUS           reduce using rule 8 (expression -> expression MINUS term .)
    $end            reduce using rule 8 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 8 (expression -> expression MINUS term .)
    NUMBER          reduce using rule 8 (expression -> expression MINUS term .)
    STRING          reduce using rule 8 (expression -> expression MINUS term .)
    IDENTIFIER      reduce using rule 8 (expression -> expression MINUS term .)
    LPAREN          reduce using rule 8 (expression -> expression MINUS term .)
    ELSE            reduce using rule 8 (expression -> expression MINUS term .)
    MULTIPLY        shift and go to state 22
    DIVIDE          shift and go to state 23


state 33

    (10) term -> term MULTIPLY factor .

    MULTIPLY        reduce using rule 10 (term -> term MULTIPLY factor .)
    DIVIDE          reduce using rule 10 (term -> term MULTIPLY factor .)
    PLUS            reduce using rule 10 (term -> term MULTIPLY factor .)
    MINUS           reduce using rule 10 (term -> term MULTIPLY factor .)
    $end            reduce using rule 10 (term -> term MULTIPLY factor .)
    RPAREN          reduce using rule 10 (term -> term MULTIPLY factor .)
    NUMBER          reduce using rule 10 (term -> term MULTIPLY factor .)
    STRING          reduce using rule 10 (term -> term MULTIPLY factor .)
    IDENTIFIER      reduce using rule 10 (term -> term MULTIPLY factor .)
    LPAREN          reduce using rule 10 (term -> term MULTIPLY factor .)
    ELSE            reduce using rule 10 (term -> term MULTIPLY factor .)


state 34

    (11) term -> term DIVIDE factor .

    MULTIPLY        reduce using rule 11 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 11 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 11 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 11 (term -> term DIVIDE factor .)
    $end            reduce using rule 11 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 11 (term -> term DIVIDE factor .)
    NUMBER          reduce using rule 11 (term -> term DIVIDE factor .)
    STRING          reduce using rule 11 (term -> term DIVIDE factor .)
    IDENTIFIER      reduce using rule 11 (term -> term DIVIDE factor .)
    LPAREN          reduce using rule 11 (term -> term DIVIDE factor .)
    ELSE            reduce using rule 11 (term -> term DIVIDE factor .)


state 35

    (16) assignment -> IDENTIFIER EQUAL expression .
    (7) expression -> expression . PLUS term
    (8) expression -> expression . MINUS term

    $end            reduce using rule 16 (assignment -> IDENTIFIER EQUAL expression .)
    NUMBER          reduce using rule 16 (assignment -> IDENTIFIER EQUAL expression .)
    STRING          reduce using rule 16 (assignment -> IDENTIFIER EQUAL expression .)
    IDENTIFIER      reduce using rule 16 (assignment -> IDENTIFIER EQUAL expression .)
    LPAREN          reduce using rule 16 (assignment -> IDENTIFIER EQUAL expression .)
    ELSE            reduce using rule 16 (assignment -> IDENTIFIER EQUAL expression .)
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21


state 36

    (24) function_def -> DEF IDENTIFIER LPAREN . RPAREN statement

    RPAREN          shift and go to state 42


state 37

    (15) factor -> LPAREN expression RPAREN .

    MULTIPLY        reduce using rule 15 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 15 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 15 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 15 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 15 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 15 (factor -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 15 (factor -> LPAREN expression RPAREN .)
    STRING          reduce using rule 15 (factor -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 15 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 15 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 15 (factor -> LPAREN expression RPAREN .)


state 38

    (20) if_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (21) if_statement -> IF LPAREN expression . RPAREN statement
    (7) expression -> expression . PLUS term
    (8) expression -> expression . MINUS term

    RPAREN          shift and go to state 43
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21


state 39

    (22) while_loop -> WHILE LPAREN expression . RPAREN statement
    (7) expression -> expression . PLUS term
    (8) expression -> expression . MINUS term

    RPAREN          shift and go to state 44
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21


state 40

    (23) for_loop -> FOR LPAREN assignment . expression RPAREN statement
    (6) expression -> . term
    (7) expression -> . expression PLUS term
    (8) expression -> . expression MINUS term
    (9) term -> . factor
    (10) term -> . term MULTIPLY factor
    (11) term -> . term DIVIDE factor
    (12) factor -> . NUMBER
    (13) factor -> . STRING
    (14) factor -> . IDENTIFIER
    (15) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    IDENTIFIER      shift and go to state 27
    LPAREN          shift and go to state 13

    expression                     shift and go to state 45
    term                           shift and go to state 7
    factor                         shift and go to state 14

state 41

    (16) assignment -> IDENTIFIER . EQUAL expression

    EQUAL           shift and go to state 24


state 42

    (24) function_def -> DEF IDENTIFIER LPAREN RPAREN . statement
    (1) statement -> . expression
    (2) statement -> . assignment
    (3) statement -> . control_structure
    (4) statement -> . function_def
    (5) statement -> . empty
    (6) expression -> . term
    (7) expression -> . expression PLUS term
    (8) expression -> . expression MINUS term
    (16) assignment -> . IDENTIFIER EQUAL expression
    (17) control_structure -> . if_statement
    (18) control_structure -> . while_loop
    (19) control_structure -> . for_loop
    (24) function_def -> . DEF IDENTIFIER LPAREN RPAREN statement
    (25) empty -> .
    (9) term -> . factor
    (10) term -> . term MULTIPLY factor
    (11) term -> . term DIVIDE factor
    (20) if_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (21) if_statement -> . IF LPAREN expression RPAREN statement
    (22) while_loop -> . WHILE LPAREN expression RPAREN statement
    (23) for_loop -> . FOR LPAREN assignment expression RPAREN statement
    (12) factor -> . NUMBER
    (13) factor -> . STRING
    (14) factor -> . IDENTIFIER
    (15) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 8
    DEF             shift and go to state 12
    $end            reduce using rule 25 (empty -> .)
    ELSE            reduce using rule 25 (empty -> .)
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    LPAREN          shift and go to state 13

    statement                      shift and go to state 46
    expression                     shift and go to state 2
    assignment                     shift and go to state 3
    control_structure              shift and go to state 4
    function_def                   shift and go to state 5
    empty                          shift and go to state 6
    term                           shift and go to state 7
    if_statement                   shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    factor                         shift and go to state 14

state 43

    (20) if_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (21) if_statement -> IF LPAREN expression RPAREN . statement
    (1) statement -> . expression
    (2) statement -> . assignment
    (3) statement -> . control_structure
    (4) statement -> . function_def
    (5) statement -> . empty
    (6) expression -> . term
    (7) expression -> . expression PLUS term
    (8) expression -> . expression MINUS term
    (16) assignment -> . IDENTIFIER EQUAL expression
    (17) control_structure -> . if_statement
    (18) control_structure -> . while_loop
    (19) control_structure -> . for_loop
    (24) function_def -> . DEF IDENTIFIER LPAREN RPAREN statement
    (25) empty -> .
    (9) term -> . factor
    (10) term -> . term MULTIPLY factor
    (11) term -> . term DIVIDE factor
    (20) if_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (21) if_statement -> . IF LPAREN expression RPAREN statement
    (22) while_loop -> . WHILE LPAREN expression RPAREN statement
    (23) for_loop -> . FOR LPAREN assignment expression RPAREN statement
    (12) factor -> . NUMBER
    (13) factor -> . STRING
    (14) factor -> . IDENTIFIER
    (15) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 8
    DEF             shift and go to state 12
    $end            reduce using rule 25 (empty -> .)
    ELSE            reduce using rule 25 (empty -> .)
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    LPAREN          shift and go to state 13

    expression                     shift and go to state 2
    statement                      shift and go to state 47
    assignment                     shift and go to state 3
    control_structure              shift and go to state 4
    function_def                   shift and go to state 5
    empty                          shift and go to state 6
    term                           shift and go to state 7
    if_statement                   shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    factor                         shift and go to state 14

state 44

    (22) while_loop -> WHILE LPAREN expression RPAREN . statement
    (1) statement -> . expression
    (2) statement -> . assignment
    (3) statement -> . control_structure
    (4) statement -> . function_def
    (5) statement -> . empty
    (6) expression -> . term
    (7) expression -> . expression PLUS term
    (8) expression -> . expression MINUS term
    (16) assignment -> . IDENTIFIER EQUAL expression
    (17) control_structure -> . if_statement
    (18) control_structure -> . while_loop
    (19) control_structure -> . for_loop
    (24) function_def -> . DEF IDENTIFIER LPAREN RPAREN statement
    (25) empty -> .
    (9) term -> . factor
    (10) term -> . term MULTIPLY factor
    (11) term -> . term DIVIDE factor
    (20) if_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (21) if_statement -> . IF LPAREN expression RPAREN statement
    (22) while_loop -> . WHILE LPAREN expression RPAREN statement
    (23) for_loop -> . FOR LPAREN assignment expression RPAREN statement
    (12) factor -> . NUMBER
    (13) factor -> . STRING
    (14) factor -> . IDENTIFIER
    (15) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 8
    DEF             shift and go to state 12
    $end            reduce using rule 25 (empty -> .)
    ELSE            reduce using rule 25 (empty -> .)
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    LPAREN          shift and go to state 13

    expression                     shift and go to state 2
    statement                      shift and go to state 48
    assignment                     shift and go to state 3
    control_structure              shift and go to state 4
    function_def                   shift and go to state 5
    empty                          shift and go to state 6
    term                           shift and go to state 7
    if_statement                   shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    factor                         shift and go to state 14

state 45

    (23) for_loop -> FOR LPAREN assignment expression . RPAREN statement
    (7) expression -> expression . PLUS term
    (8) expression -> expression . MINUS term

    RPAREN          shift and go to state 49
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21


state 46

    (24) function_def -> DEF IDENTIFIER LPAREN RPAREN statement .

    $end            reduce using rule 24 (function_def -> DEF IDENTIFIER LPAREN RPAREN statement .)
    ELSE            reduce using rule 24 (function_def -> DEF IDENTIFIER LPAREN RPAREN statement .)


state 47

    (20) if_statement -> IF LPAREN expression RPAREN statement . ELSE statement
    (21) if_statement -> IF LPAREN expression RPAREN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 50
    $end            reduce using rule 21 (if_statement -> IF LPAREN expression RPAREN statement .)

  ! ELSE            [ reduce using rule 21 (if_statement -> IF LPAREN expression RPAREN statement .) ]


state 48

    (22) while_loop -> WHILE LPAREN expression RPAREN statement .

    $end            reduce using rule 22 (while_loop -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 22 (while_loop -> WHILE LPAREN expression RPAREN statement .)


state 49

    (23) for_loop -> FOR LPAREN assignment expression RPAREN . statement
    (1) statement -> . expression
    (2) statement -> . assignment
    (3) statement -> . control_structure
    (4) statement -> . function_def
    (5) statement -> . empty
    (6) expression -> . term
    (7) expression -> . expression PLUS term
    (8) expression -> . expression MINUS term
    (16) assignment -> . IDENTIFIER EQUAL expression
    (17) control_structure -> . if_statement
    (18) control_structure -> . while_loop
    (19) control_structure -> . for_loop
    (24) function_def -> . DEF IDENTIFIER LPAREN RPAREN statement
    (25) empty -> .
    (9) term -> . factor
    (10) term -> . term MULTIPLY factor
    (11) term -> . term DIVIDE factor
    (20) if_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (21) if_statement -> . IF LPAREN expression RPAREN statement
    (22) while_loop -> . WHILE LPAREN expression RPAREN statement
    (23) for_loop -> . FOR LPAREN assignment expression RPAREN statement
    (12) factor -> . NUMBER
    (13) factor -> . STRING
    (14) factor -> . IDENTIFIER
    (15) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 8
    DEF             shift and go to state 12
    $end            reduce using rule 25 (empty -> .)
    ELSE            reduce using rule 25 (empty -> .)
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    LPAREN          shift and go to state 13

    assignment                     shift and go to state 3
    expression                     shift and go to state 2
    statement                      shift and go to state 51
    control_structure              shift and go to state 4
    function_def                   shift and go to state 5
    empty                          shift and go to state 6
    term                           shift and go to state 7
    if_statement                   shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    factor                         shift and go to state 14

state 50

    (20) if_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (1) statement -> . expression
    (2) statement -> . assignment
    (3) statement -> . control_structure
    (4) statement -> . function_def
    (5) statement -> . empty
    (6) expression -> . term
    (7) expression -> . expression PLUS term
    (8) expression -> . expression MINUS term
    (16) assignment -> . IDENTIFIER EQUAL expression
    (17) control_structure -> . if_statement
    (18) control_structure -> . while_loop
    (19) control_structure -> . for_loop
    (24) function_def -> . DEF IDENTIFIER LPAREN RPAREN statement
    (25) empty -> .
    (9) term -> . factor
    (10) term -> . term MULTIPLY factor
    (11) term -> . term DIVIDE factor
    (20) if_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (21) if_statement -> . IF LPAREN expression RPAREN statement
    (22) while_loop -> . WHILE LPAREN expression RPAREN statement
    (23) for_loop -> . FOR LPAREN assignment expression RPAREN statement
    (12) factor -> . NUMBER
    (13) factor -> . STRING
    (14) factor -> . IDENTIFIER
    (15) factor -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 8
    DEF             shift and go to state 12
    $end            reduce using rule 25 (empty -> .)
    ELSE            reduce using rule 25 (empty -> .)
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    LPAREN          shift and go to state 13

    expression                     shift and go to state 2
    statement                      shift and go to state 52
    assignment                     shift and go to state 3
    control_structure              shift and go to state 4
    function_def                   shift and go to state 5
    empty                          shift and go to state 6
    term                           shift and go to state 7
    if_statement                   shift and go to state 9
    while_loop                     shift and go to state 10
    for_loop                       shift and go to state 11
    factor                         shift and go to state 14

state 51

    (23) for_loop -> FOR LPAREN assignment expression RPAREN statement .

    $end            reduce using rule 23 (for_loop -> FOR LPAREN assignment expression RPAREN statement .)
    ELSE            reduce using rule 23 (for_loop -> FOR LPAREN assignment expression RPAREN statement .)


state 52

    (20) if_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    $end            reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 20 (if_statement -> IF LPAREN expression RPAREN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 47 resolved as shift
