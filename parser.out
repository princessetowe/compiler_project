Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> expression OPERATOR expression
Rule 3     expression -> NUMBER
Rule 4     expression -> STRING
Rule 5     expression -> IDENTIFIER

Terminals, with rules where they appear

COMMENT              : 
IDENTIFIER           : 5
NUMBER               : 3
OPERATOR             : 2
STRING               : 4
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 2
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) expression -> . expression OPERATOR expression
    (3) expression -> . NUMBER
    (4) expression -> . STRING
    (5) expression -> . IDENTIFIER

    NUMBER          shift and go to state 3
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 5

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (2) expression -> expression . OPERATOR expression

    $end            reduce using rule 1 (statement -> expression .)
    OPERATOR        shift and go to state 6


state 3

    (3) expression -> NUMBER .

    OPERATOR        reduce using rule 3 (expression -> NUMBER .)
    $end            reduce using rule 3 (expression -> NUMBER .)


state 4

    (4) expression -> STRING .

    OPERATOR        reduce using rule 4 (expression -> STRING .)
    $end            reduce using rule 4 (expression -> STRING .)


state 5

    (5) expression -> IDENTIFIER .

    OPERATOR        reduce using rule 5 (expression -> IDENTIFIER .)
    $end            reduce using rule 5 (expression -> IDENTIFIER .)


state 6

    (2) expression -> expression OPERATOR . expression
    (2) expression -> . expression OPERATOR expression
    (3) expression -> . NUMBER
    (4) expression -> . STRING
    (5) expression -> . IDENTIFIER

    NUMBER          shift and go to state 3
    STRING          shift and go to state 4
    IDENTIFIER      shift and go to state 5

    expression                     shift and go to state 7

state 7

    (2) expression -> expression OPERATOR expression .
    (2) expression -> expression . OPERATOR expression

    OPERATOR        reduce using rule 2 (expression -> expression OPERATOR expression .)
    $end            reduce using rule 2 (expression -> expression OPERATOR expression .)

  ! OPERATOR        [ shift and go to state 6 ]

